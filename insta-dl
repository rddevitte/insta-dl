#!/usr/bin/env python3

import argparse
import fileinput
import json
import re
import requests
import sys
import wget


def parse_ig_json(content):
    insta = content['graphql']['shortcode_media']
    urls = []

    if 'edge_sidecar_to_children' not in insta:
        if insta['is_video']:
            url = insta['video_url']
        else:
            url = insta['display_resources'][2]['src']

        urls.append(url)
    else:
        for multiple in insta['edge_sidecar_to_children']['edges']:
            if multiple['node']['is_video']:
                url = multiple['node']['video_url']
            else:
                url = multiple['node']['display_resources'][2]['src']

            urls.append(url)

    return urls


def download_media(media_list):
    try:
        if not media_list:
            raise Exception('No IG media URLs in the list.')
        filecount = 0
        for media_url in media_list:
            print('Downloading file %d of %d...' %
                  (filecount + 1, len(media_list)))
            file = wget.download(media_url)
            filecount += 1
            print()
        print('Done downloading %d file(s)!' % filecount)
    except Exception as e:
        print(e, file=sys.stderr)


def get_media_list_from_url(url):
    url_pattern = r'https:\/\/www\.instagram\.com\/(p|reel|tv)\/[a-zA-Z0-9_-]{11}\/'
    user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36'
    headers = {'User-Agent': user_agent}
    media_urls = []

    try:
        if re.fullmatch(url_pattern, url) is None:
            raise Exception(
                "URL '%s' doesn't match IG media URL format!" % url)
        graphql_url = url + '?__a=1'
        content = requests.get(graphql_url, headers=headers)
        if content.status_code != 200:
            raise Exception("Error trying to fetch from URL '%s' (HTTP status code: %d)" %
                            (url, content.status_code))
        json_content = content.json()
        media_urls = parse_ig_json(json_content)
    except Exception as e:
        print(e, file=sys.stderr)

    return media_urls


def get_media_list_from_json_file(filename):
    media_urls = []

    try:
        with open(filename, 'r') as file:
            buf = file.read()
            json_content = json.loads(buf)
            media_urls = parse_ig_json(json_content)
    except IOError:
        print("Seems file '%s' doesn't exist or has restricted permissions!" %
              filename, file=sys.stderr)
    except ValueError:
        print("Seems file '%s' has no JSON content!" %
              filename, file=sys.stderr)
    except Exception as e:
        print('Unexpected exception:', e, file=sys.stderr)

    return media_urls


def get_media_list_from_filelist(filename):
    urls, medias_urls = [], []

    try:
        with open(filename, 'r') as file:
            while line := file.readline().rstrip():
                urls.append(line)
    except IOError:
        print("Seems file '%s' doesn't exist or has restricted permissions!" %
              filename, file=sys.stderr)
    except Exception as e:
        print('Unexpected exception:', e, file=sys.stderr)
    finally:
        for url in urls:
            media_list = get_media_list_from_url(url)
            medias_urls.extend(media_list)

    return medias_urls


def get_media_list_from_stdin():
    urls, medias_urls = [], []

    try:
        for url in fileinput.input():
            urls.append(url.rstrip('\r').rstrip('\n'))
    except KeyboardInterrupt:
        print('\nReading from stdin interrupted')
    except Exception as e:
        print('Unexpected exception:', e, file=sys.stderr)
    finally:
        for url in urls:
            media_list = get_media_list_from_url(url)
            medias_urls.extend(media_list)

    return medias_urls


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Download Instagram media')
    parser.add_argument(
        '-u', '--url', help='Instagram page URL of the media', type=str)
    parser.add_argument(
        '-j', '--json',
        help='File containing media data in JSON format (GraphQL)', type=str)
    parser.add_argument(
        '-l', '--list', help="Text file containing a list of IG URL's", type=str)
    args = parser.parse_args()

    if args.url is None and args.json is None and args.list is None:
        print('Neither IG URL nor JSON file nor list of URLs provided!')
        print('Accepting URL(s) from standard input...')
        download_media(get_media_list_from_stdin())
    else:
        if args.url is not None:
            download_media(get_media_list_from_url(args.url))
        if args.json is not None:
            download_media(get_media_list_from_json_file(args.json))
        if args.list is not None:
            download_media(get_media_list_from_filelist(args.list))
